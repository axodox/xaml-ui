@use 'Common.scss' as common;

.container {
  display: grid;
  grid-template-columns: auto 1fr;
  column-gap: 6px;
}

input {
  display: none;
}

input[type="radio"]:checked+.radioButton>.circle {
  display: grid;
}

input[type="radio"]:not(:checked):not(:hover):not(:active):not(:disabled)+.radioButton {
  background-color: common.$ControlAltFillColorSecondaryLight;
  border-color: common.$ControlStrongStrokeColorDefaultLight;

  @media (prefers-color-scheme: dark) {
    background-color: common.$ControlAltFillColorSecondaryDark;
    border-color: common.$ControlStrongStrokeColorDefaultDark;
  }
}

input[type="radio"]:not(:checked):hover:not(:active):not(:disabled)+.radioButton {
  background-color: common.$ControlAltFillColorTertiaryLight;
  border-color: common.$ControlStrongStrokeColorDefaultLight;

  @media (prefers-color-scheme: dark) {
    background-color: common.$ControlAltFillColorTertiaryDark;
    border-color: common.$ControlStrongStrokeColorDefaultDark;
  }
}

input[type="radio"]:not(:checked):active:not(:disabled)+.radioButton {
  background-color: common.$SubtleFillColorTransparentLight;
  border-color: common.$ControlStrongStrokeColorDisabledLight;

  @media (prefers-color-scheme: dark) {
    background-color: common.$SubtleFillColorTransparentDark;
    border-color: common.$ControlStrongStrokeColorDisabledDark;
  }

  &>.circle {
    transform: scale(1);
  }
}

input[type="radio"]:checked:not(:hover):not(:active):not(:disabled)+.radioButton {
  background-color: common.$AccentFillColorDefaultLight;
  border-color: common.$AccentFillColorDefaultLight;

  @media (prefers-color-scheme: dark) {
    background-color: common.$AccentFillColorDefaultDark;
    border-color: common.$AccentFillColorDefaultDark;
  }

  &>.circle {
    transform: scale(1);
  }
}

input[type="radio"]:checked:hover:not(:active):not(:disabled)+.radioButton {
  background-color: common.$AccentFillColorSecondaryLight;
  border-color: common.$AccentFillColorSecondaryLight;

  @media (prefers-color-scheme: dark) {
    background-color: common.$AccentFillColorSecondaryDark;
    border-color: common.$AccentFillColorSecondaryDark;
  }

  &>.circle {
    transform: scale(1.2);
  }
}

input[type="radio"]:checked:active:not(:disabled)+.radioButton {
  background-color: common.$AccentFillColorTertiaryLight;
  border-color: common.$AccentFillColorTertiaryLight;

  &>.circle {
    transform: scale(1);
  }

  @media (prefers-color-scheme: dark) {
    background-color: common.$AccentFillColorTertiaryDark;
    border-color: common.$AccentFillColorTertiaryDark;
  }
}

input[type="radio"]:not(:checked):disabled+.radioButton {
  background-color: common.$ControlAltFillColorDisabledLight;
  border-color: common.$ControlStrongStrokeColorDisabledLight;

  @media (prefers-color-scheme: dark) {
    background-color: common.$ControlAltFillColorDisabledDark;
    border-color: common.$ControlStrongStrokeColorDisabledDark;
  }
}

input[type="radio"]:checked:disabled+.radioButton {
  background-color: common.$AccentFillColorDisabledLight;
  border-color: common.$ControlStrongStrokeColorDisabledLight;

  @media (prefers-color-scheme: dark) {
    background-color: common.$AccentFillColorDisabledDark;
    border-color: common.$ControlStrongStrokeColorDisabledDark;
  }
}

.radioButton {
  display: grid;
  width: 20px;
  height: 20px;
  border-radius: 11px;
  border-style: solid;
  border-width: common.$ControlBorderThickness;

  transition: border-color common.$ControlFastAnimationDuration;
  transition: background-color common.$ControlFastAnimationDuration;
}

.circle {
  width: 11px;
  height: 11px;
  border-radius: 6.5px;
  align-self: center;
  justify-self: center;
  background-color: common.$TextOnAccentFillColorPrimaryLight;
  transition: transform common.$ControlNormalAnimationDuration;
  transform: scale(0);

  @media (prefers-color-scheme: dark) {
    background-color: common.$TextOnAccentFillColorPrimaryDark;
  }
}

.content {
  align-self: center;
}